{"/home/travis/build/npmtest/node-npmtest-money-math/test.js":"/* istanbul instrument in package npmtest_money_math */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-money-math/lib.npmtest_money_math.js":"/* istanbul instrument in package npmtest_money_math */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_money_math = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_money_math = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-money-math/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-money-math && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_money_math */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_money_math\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_money_math.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_money_math.rollup.js'] =\n            local.assetsDict['/assets.npmtest_money_math.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_money_math.__dirname +\n                    '/lib.npmtest_money_math.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-money-math/node_modules/money-math/money.js":"(function (factory) {\n    \"use strict\";\n\n    var root = (typeof self === \"object\" && self.self === self && self) ||\n                (typeof global === \"object\" && global.global === global && global);\n\n\n    if (typeof exports !== \"undefined\") {\n        var BigInteger = require(\"jsbn\").BigInteger;\n        factory(root, exports, BigInteger);\n    } else {\n        var BigInt = root.BigInteger ? root.BigInteger : root.jsbn.BigInteger;\n        root.Money = factory(root, {}, BigInt);\n    }\n}(function (root, Money, BigInteger) {\n    \"use strict\";\n\n    var Currency = function (code) {\n            this.code = code;\n        },\n\n        separateThousands = function (inStr, withStr) {\n            var sign = \"\",\n                src = inStr,\n                ret = \"\",\n                appendix;\n\n            if (inStr[0] === \"-\") {\n                sign = \"-\";\n                src = src.substr(1);\n            }\n\n\n            while (src.length > 0) {\n                if (ret.length > 0) {\n                    ret = withStr + ret;\n                }\n\n                if (src.length <= 3) {\n                    ret = src + ret;\n                    break;\n                }\n\n                appendix = src.substr(src.length - 3, 3);\n                ret = appendix + ret;\n                src = src.substr(0, src.length - 3);\n            }\n\n            return sign + ret;\n        },\n\n        integerValue = function (amount) {\n            return (/^(\\-?\\d+)\\.\\d\\d$/).exec(amount)[1];\n        },\n\n        isString = function (obj) {\n            return Object.prototype.toString.call(obj) === \"[object String]\";\n        },\n\n        round = function (amount) {\n            var fraction = parseInt(amount.substr(-2), 10),\n                wholeAmount = integerValue(amount) + \".00\";\n\n            return (\n                fraction < 50 ?\n                wholeAmount :\n                Money.add(wholeAmount, \"1.00\")\n            );\n        };\n\n    Currency.prototype.format = function (amount) {\n        switch (this.code) {\n        case \"JPY\":\n            return separateThousands(integerValue(amount), \",\");\n\n        case \"EUR\":\n        case \"GBP\":\n            return separateThousands(integerValue(amount), \".\") + \",\" + amount.substr(-2);\n\n        case \"CHF\":\n        case \"USD\":\n            return separateThousands(integerValue(amount), \",\") + \".\" + amount.substr(-2);\n\n        case \"SEK\":\n        case \"LTL\":\n        case \"PLN\":\n        case \"SKK\":\n        case \"UAH\":\n            return separateThousands(integerValue(amount), \" \") + \",\" + amount.substr(-2);\n\n        default:\n            return amount;\n        }\n    };\n\n    Money.amountToCents = function (amount) {\n        return amount.replace(\".\", \"\");\n    };\n\n    Money.centsToAmount = function (cents) {\n        var sign,\n            abs;\n\n        if (!isString(cents)) {\n            return undefined;\n        }\n\n        sign = (cents[0] === \"-\" ? \"-\" : \"\");\n        abs = (sign === \"-\" ? cents.substr(1) : cents);\n\n        while (abs.length < 3) {\n            abs = [\"0\", abs].join(\"\");\n        }\n\n        return sign + abs.substr(0, abs.length - 2) + \".\" + abs.substr(-2);\n    };\n\n    Money.floatToAmount = function (f) {\n        return (\"\" + (Math.round(f * 100.0) / 100.0))\n        .replace(/^-(\\d+)$/, \"-$1.00\")              //-xx\n        .replace(/^(\\d+)$/, \"$1.00\")                //xx\n        .replace(/^-(\\d+)\\.(\\d)$/, \"-$1.$20\")       //-xx.xx\n        .replace(/^(\\d+)\\.(\\d)$/, \"$1.$20\");        //xx.xx\n    };\n\n    Money.integralPart = function (amount) {\n        return integerValue(amount);\n    };\n\n    Money.format = function (currency, amount) {\n        return new Currency(currency).format(amount);\n    };\n\n    Money.add = function (a, b) {\n        return Money.centsToAmount(\n            new BigInteger(\n                Money.amountToCents(a)\n            ).add(\n                new BigInteger(Money.amountToCents(b))\n            ).toString()\n        );\n    };\n\n    Money.subtract = function (a, b) {\n        return Money.centsToAmount(\n            new BigInteger(\n                Money.amountToCents(a)\n            ).subtract(\n                new BigInteger(Money.amountToCents(b))\n            ).toString()\n        );\n    };\n\n    Money.mul = function (a, b) {\n        return Money.centsToAmount(\n            new BigInteger(\n                Money.amountToCents(a)\n            ).multiply(\n                new BigInteger(Money.amountToCents(b))\n            ).divide(\n                new BigInteger(\"100\")\n            ).toString()\n        );\n    };\n\n    Money.div = function (a, b) {\n        var hundredthsOfCents = new BigInteger(\n                Money.amountToCents(a)\n            ).multiply(\n                new BigInteger(\"10000\")\n            ).divide(\n                new BigInteger(Money.amountToCents(b))\n            ),\n\n            remainder = parseInt(hundredthsOfCents.toString().substr(-2), 10);\n\n        return Money.centsToAmount(\n            hundredthsOfCents.divide(\n                new BigInteger(\"100\")\n            ).add(\n                new BigInteger(remainder > 50 ? \"1\" : \"0\")\n            ).toString()\n        );\n    };\n\n    Money.percent = function (value, percent) {\n        var p = new BigInteger(\n                Money.amountToCents(value)\n            ).multiply(\n                new BigInteger(Money.amountToCents(percent))\n            ),\n\n            q = p.divide(new BigInteger(\"10000\")),\n            r = p.mod(new BigInteger(\"10000\"));\n\n        return Money.centsToAmount(\n            (r.compareTo(new BigInteger(\"4999\")) > 0 ? q.add(new BigInteger(\"1\")) : q).toString()\n        );\n    };\n\n    Money.roundUpTo5Cents = function (amount) {\n        var lastDigit = parseInt(amount.substr(-1), 10),\n            additon = \"0.00\";\n\n        if ((lastDigit % 5) !== 0) {\n            additon = \"0.0\" + (5 - (lastDigit % 5));\n        }\n\n        return Money.add(amount, additon);\n    };\n\n    Money.roundTo5Cents = function (amount) {\n        return Money.div(\n            round(Money.mul(amount, \"20.00\")),\n            \"20.00\"\n        );\n    };\n\n    Money.cmp = function (a, b) {\n        return new BigInteger(a.replace(\".\", \"\")).compareTo(new BigInteger(b.replace(\".\", \"\")));\n    };\n\n    Money.isEqual = function (a, b) {\n        return Money.cmp(a, b) === 0;\n    };\n    \n    Money.isZero = function (a) {\n        return Money.isEqual(a, \"0.00\");\n    };\n\n    Money.isNegative = function (a) {\n        return Money.cmp(a, \"0.00\") < 0;\n    };\n\n    Money.isPositive = function (a) {\n        return Money.cmp(a, \"0.00\") > 0;\n    };\n\n    return Money;\n}));\n"}